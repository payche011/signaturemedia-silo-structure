name: Build & Release plugin

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      MAIN_FILE: signaturemedia-silo-structure.php   # <- path to your main plugin file
      PLUGIN_DIR: signaturemedia-silo-structure      # <- installed plugin folder name

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Get the version from the tag (v1.2.3, v1.2.3a, v1.2.3-beta.1 â†’ 1.2.3, 1.2.3a, 1.2.3-beta.1)
      - name: Resolve version
        id: ver
        run: |
          TAG="${GITHUB_REF_NAME:-manual}"
          if [ "$TAG" = "manual" ]; then
            echo "Running manually; set VERSION input if desired."
            exit 0
          fi
          VER="${TAG#v}"
          echo "version=${VER}" >> $GITHUB_OUTPUT

      # Rewrite the Version: line in the main plugin file to match the tag (in workspace only)
      - name: Sync plugin header Version to tag
        if: steps.ver.outputs.version != ''
        run: |
          VER="${{ steps.ver.outputs.version }}"
          # Show current version line
          grep -E '^Version:\s*' "$MAIN_FILE" || true
          # Replace 'Version: ...' line robustly (handles spaces and CRLF)
          perl -0777 -pe "s/^Version:\s*.*/Version: ${VER}/m" -i "$MAIN_FILE"
          echo "After:"
          grep -E '^Version:\s*' "$MAIN_FILE" || true

      - name: Build ZIP (top-level folder must equal plugin dir)
        run: |
          set -e
          BUILD_DIR=".build"
          TAG_NAME="${GITHUB_REF_NAME:-manual}"
          ZIP_NAME="${PLUGIN_DIR}-${TAG_NAME}.zip"

          rm -rf "${BUILD_DIR}"
          mkdir -p "${BUILD_DIR}/${PLUGIN_DIR}"

          rsync -a \
            --exclude ".git" \
            --exclude ".github" \
            --exclude ".gitignore" \
            --exclude ".gitattributes" \
            --exclude "node_modules" \
            --exclude "${BUILD_DIR}" \
            ./ "${BUILD_DIR}/${PLUGIN_DIR}/"

          (cd "${BUILD_DIR}" && zip -r "../${ZIP_NAME}" "${PLUGIN_DIR}")
          echo "ZIP_PATH=${ZIP_NAME}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: ${{ env.ZIP_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
